@using ResidualKnowledgeApp.Shared.DTO;
@inject ResidualKnowledgeApp.Client.Services.IProjectsService ProjectsService

@if (markCriteria != null)
{
    <MudTable Items="@markCriteria" Dense="true" Hover="true"
              CanCancelEdit="true"
              @bind-SelectedItem="selectedItem"
              CommitEditTooltip="Commit Edit"
              RowEditPreview="BackupItem"
              RowEditCancel="ResetItemToOriginalValues">

        <ToolBarContent>
            <MudText Typo="Typo.h6">Шкала оценивания дисциплины</MudText>
        </ToolBarContent>
        <ColGroup>
            <col />
            <col />
            <col />
            <col />
        </ColGroup>
        <HeaderContent>
            <MudTh>Min</MudTh>
            <MudTh>Max</MudTh>
            <MudTh>ECTS</MudTh>
            <MudTh>по 5-балльной</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Min">@context.MinScore</MudTd>
            <MudTd DataLabel="Max">@context.MaxScore</MudTd>
            <MudTd DataLabel="ECTS">@context.ECTSMark</MudTd>
            <MudTd DataLabel="5-scale">@context.FivePointScaleMark</MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <MudTd DataLabel="Min">
                <MudNumericField @bind-Value="@context.MinScore" Required Min="1" />
            </MudTd>
            <MudTd DataLabel="Max">
                <MudNumericField @bind-Value="@context.MaxScore" Required />
            </MudTd>
            <MudTd DataLabel="ECTS">@context.ECTSMark</MudTd>
            <MudTd DataLabel="5-scale">@context.FivePointScaleMark</MudTd>
        </RowEditingTemplate>
    </MudTable>
}

@code
{

    [Parameter]
    public CheckingDisciplineDetailsDTO Discipline { get; set; }
    private List<MarkCriterion> markCriteria;

    private MarkCriterion selectedItem;
    private MarkCriterion elementBeforeEdit;

    protected override void OnParametersSet()
    {
        markCriteria = Discipline.MarkCriteria.OrderBy(mc => mc.ECTSMark).ToList();
    }

    private void AddEditionEvent(string message)
    {
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        elementBeforeEdit = new MarkCriterion()
        {
            MinScore = ((MarkCriterion)element).MinScore,
            MaxScore = ((MarkCriterion)element).MaxScore,
            ECTSMark = ((MarkCriterion)element).ECTSMark,
            FivePointScaleMark = ((MarkCriterion)element).FivePointScaleMark
        };
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((MarkCriterion)element).MinScore = elementBeforeEdit.MinScore;
        ((MarkCriterion)element).MaxScore = elementBeforeEdit.MaxScore;
        ((MarkCriterion)element).ECTSMark = elementBeforeEdit.ECTSMark;
        ((MarkCriterion)element).FivePointScaleMark = elementBeforeEdit.FivePointScaleMark;
    }

    public async Task Save()
    {
        await ProjectsService.SaveMarkCriteria(Discipline.Id, markCriteria);
    }
}
