@inject ResidualKnowledgeTestApp.Client.Services.ICheckingDisciplinesService ProjectsService
@using ResidualKnowledgeTestApp.Client.Pages.FileUploadingComponents;

@*isRendering = (ProjectsService.UserChoice.DisciplinesSelected && ProjectsService.UserChoice.CompetencesSelected;
    isUploading = (ProjectsService.UserChoice.FilesShouldBeUpdated || editing);*@

@if (ProjectsService.UserChoice.DisciplinesSelected && ProjectsService.UserChoice.CompetencesSelected
  && (ProjectsService.UserChoice.FilesShouldBeUpdated || editing || !ProjectsService.UserChoice.FilesUploaded))
{
    <MudText Typo="Typo.h6">Загрузка информации о проверяемых дисциплинах</MudText>
}

@foreach (var discipline in CheckingDisciplines)
{
    <DisciplineFilesUploading IsRendering="@(ProjectsService.UserChoice.DisciplinesSelected && ProjectsService.UserChoice.CompetencesSelected)"
                              Editing="@(ProjectsService.UserChoice.FilesShouldBeUpdated || editing || !ProjectsService.UserChoice.FilesUploaded)"
                              Discipline="discipline"
                              @ref="DisciplineFilesUploadingRef" />
}

@if (ProjectsService.UserChoice.DisciplinesSelected && ProjectsService.UserChoice.CompetencesSelected)
{
    @if (ProjectsService.UserChoice.DisciplinesSelected && ProjectsService.UserChoice.CompetencesSelected
      && (ProjectsService.UserChoice.FilesShouldBeUpdated || editing || !ProjectsService.UserChoice.FilesUploaded))
    {
        <MudBlazor.MudButton Variant="Variant.Filled"
                             Color="Color.Primary"
                             StartIcon="@Icons.Material.Filled.Save"
                             OnClick="SaveFiles">Сохранить</MudBlazor.MudButton>
    }
    else
    {
        <UploadedFiles @bind-Editing="editing" />
    }
}

<br />
<br />

@code
{
    private bool editing = false;

    [Parameter]
    public List<CheckingDisciplineDetailsDTO> CheckingDisciplines { get; set; }

    List<DisciplineFilesUploading> DisciplineFilesUploadingRefs = new List<DisciplineFilesUploading>();

    private DisciplineFilesUploading DisciplineFilesUploadingRef
    {
        set
        {
            DisciplineFilesUploadingRefs.Add(value);
        }
    }

    private async Task SaveFiles()
    {
        foreach (var childRef in DisciplineFilesUploadingRefs)
        {
            await childRef.Save();
        }
        editing = false;
        ProjectsService.UserChoice.FilesShouldBeUpdated = false;
        ProjectsService.UserChoice.FilesUploaded = true;
    }

    protected override async Task OnInitializedAsync()
    {
        ProjectsService.OnChange += StateHasChanged;
    }
}
