@page "/create"
@inject ResidualKnowledgeTestApp.Client.Services.ICheckingDisciplinesService ProjectsService
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations

<div style="max-width: 600px;">
    <EditForm Model="@project" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Название проекта" @bind-Value="project.Name" For="@(() => project.Name)" />
                <br />
                <InputFile id="fileInput" OnChange="UploadFile" hidden multiple />
                <MudElement Class="d-flex">
                    <div class="flex-grow-1">
                        <MudTextField ReadOnly="true"
                                      Label="Учебный план"
                                      @bind-Value="project.CurriculumFileName"
                                      For="@(() => project.CurriculumFileName)" />
                    </div>
                    <MudItem Class="flex-grow-0 ml-4 align-self-end">
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Filled.UploadFile"
                                   for="fileInput"
                                   Class="d-inline-flex">
                            Выбрать
                        </MudButton>
                    </MudItem>
                </MudElement>
            </MudCardContent>
            <MudCardActions>
                <MudButton Style="margin: 8px" ButtonType="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto"
                           StartIcon="@Icons.Filled.CreateNewFolder"
                           Disabled="@disableSubmit">Создать</MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</div>

@code
{
    private bool disableSubmit;
    private IBrowserFile file;
    private CreateProjectForm project = new CreateProjectForm();
    private ResidualKnowledgeTestApp.Shared.DTO.ProjectDetailsDTO createdProject = new ResidualKnowledgeTestApp.Shared.DTO.ProjectDetailsDTO();

    protected override async Task OnInitializedAsync()
    {
        ProjectsService.OnChange += StateHasChanged;
    }

    private void UploadFile(InputFileChangeEventArgs e)
    {
        file = e.GetMultipleFiles().FirstOrDefault();
        project.CurriculumFileName = file == null ? "" : file.Name;
    }

    async Task HandleSubmit(EditContext context)
    {
        disableSubmit = true;
        createdProject = await ProjectsService.CreateProject(new ResidualKnowledgeTestApp.Shared.ViewModels.CreateProjectVM { Name = project.Name });

        using var content = new MultipartFormDataContent();
        var fileContent = new StreamContent(file.OpenReadStream());
        content.Add(
            content: fileContent,
            name: "\"Files\"",
            fileName: file.Name);
        ;
        var createCurriculumVM = new ResidualKnowledgeTestApp.Shared.Curriculum { FileName = project.CurriculumFileName, ProjectId = createdProject.Id };
        var createdCurriculum = await ProjectsService.UploadCurriculumAsync(createCurriculumVM, content); // поменять тип

        NavigationManager.NavigateTo($"projects/{createdProject.Id}");
    }

    public class CreateProjectForm
    {
        [Required(ErrorMessage = "Требуется ввести название проекта")]
        [StringLength(128, ErrorMessage = "Название проекта не должно превышать 128 символов.")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Требуется выбрать файл")]
        [StringLength(128, ErrorMessage = "Название файла не должно превышать 128 символов.")]
        public string CurriculumFileName { get; set; }
    }
}